###########################
#     Global Settings     #
###########################
organization: "Kiratech"
frontendUrl: https://krateo-dashboard.test.io
backendUrl: https://krateo-dashboard.test.io
lighthouseUrl: https://krateo-dashboard.test.io/lighthouse-api

###########################
#      Global & k8s       #
###########################
global:
  nodeSelector: {}

serviceAccount:
  enabled: false

issuer:
  email:
  clusterIssuer: "letsencrypt-staging"

###########################
#   Frontend Deployment   #
###########################
frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/krateoplatformops/krateo-dashboard-frontend
    tag: 1.3.22
    pullPolicy: Always
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 2048Mi
      cpu: 500m
  service:
    type: ClusterIP

###########################
#   Backend Deployment    #
###########################
backend:
  enabled: true
  demoData: false
  replicaCount: 1
  image:
    repository: ghcr.io/krateoplatformops/krateo-dashboard-backend
    tag: 1.3.14
    pullPolicy: Always
  resources:
    requests:
      memory: 512Mi
      cpu: 100m
    limits:
      memory: 2048Mi
      cpu: 1000m
  service:
    type: ClusterIP

lighthouse:
  enabled: false
  replicaCount: 1
  image:
    repository: roadiehq/lighthouse-audit-service
    tag: latest
    pullPolicy: IfNotPresent
  containerPort: 3003
  resources:
    requests:
      memory: 128Mi
    limits:
      memory: 256Mi
  database:
    connection:
      port:
      host:
      user:
      password:
      database: lighthouse_audit_service
    pathToDatabaseCa:

###########################
#         Ingress         #
###########################
ingress:
  enabled: true
  tls:
    enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($scheme = https) { add_header  Strict-Transport-Security "max-age=0;"; }

###########################
#       PostgreSQL        #
###########################
postgresql:
  enabled: true
  global:
    postgresql:
      postgresqlUsername: backend-user
      postgresqlPassword: backend-pass
  resources:
    limits:
      memory: 512Mi
      cpu: 500m

###########################
#       Components        #
###########################
argocd:
  token: argocd.token=<token>

sonarqube:
  target: https://sonarcloud.io/api
  token: <token>

grafana:
  target: https://grafana.krateo.io/
  token: "eyJrIjoiWHpRWnFMWmdrMHdCOGRoSnk4VlB0M1l6T3hEQUYzU20iLCJuIjoiYmFja3N0YWdlIiwiaWQiOjF9"

prometheus:
  target: https://prometheus.krateo.io/api/v1/

keptn:
  bridge: http://keptn.krateoplatformops.io/bridge/api/
  api: http://keptn.krateoplatformops.io/api/v1/
  bridgeToken: <token>
  apiToken: <token>
###########################
#         Krateo        #
###########################
appConfig:
  app:
    googleAnalyticsTrackingId:

  backend:
    ssl:
      rejectUnauthorized: false
      ca:
    database:
      connection:
        ssl:
          rejectUnauthorized: false
          ca:
  # sentry:
  #   organization: Krateo
  # rollbar:
  #   organization: Krateo

kubernetes:
  url: http://localhost:6443
  token: a
  clusters:
    - name: local
      url: http://localhost:6443
      serviceAccountToken: a
      skipTLSVerify: false
      authProvider: "serviceAccount"
  customResources:

providers:
  guest:
    enabled: "true"
  github:
    clientId: <clientId>
    clientSecret: <clientSecret>
    token: <token>
    enterprise:
      enabled: false
      url: <target>
  google:
    clientId: a
    clientSecret: a
  gitlab:
    clientId: b
    clientSecret: b
    baseUrl: b
    token: x
  okta:
    clientId: b
    clientSecret: b
    audience: b
  oauth2:
    clientId: b
    clientSecret: b
    authUrl: b
    tokenUrl: b
  auth0:
    clientId: b
    clientSecret: b
    domain: b
  microsoft:
    clientId: f
    clientSecret: f
    tenantId: f
  azure:
    api:
      token: h
  sentry:
    token: e
  rollbar:
    accountToken: f
  circleci:
    authToken: r
  newRelic:
    restApiKey: r
  travisci:
    authToken: fake-travis-ci-auth-token
  pagerduty:
    token: h
  saml:
    entryPoint: a
    issuer: a

auth:
  session:
    secret: a
  github:
    clientId: <clientId>
    clientSecret: <clientSecret>
    token: <token>
  oidc:
    metadataUrl: <metadataUrl>
    clientId: <clientId>
    clientSecret: <clientSecret>
    authorizationUrl: <authorizationUrl>
    tokenUrl: <tokenUrl>
    tokenSignedResponseAlg: "RS256"
    scope: "openid profile email"
    prompt: "login"
microsoftGraphOrg:
  groupFilter: securityEnabled eq false

ldap:
  enabled: false
  secret: a
  target: ldaps://ds.example.net
  bind:
    dn: uid=ldap-reader-user,ou=people,ou=example,dc=example,dc=net
    secret: ${LDAP_SECRET}
  users:
    dn: ou=people,ou=example,dc=example,dc=net
    options:
      filter: (uid=*)
    map:
      description: l
  groups:
    dn: ou=access,ou=groups,ou=example,dc=example,dc=net
    options:
      filter: (&(objectClass=some-group-class)(!(groupType=email)))
